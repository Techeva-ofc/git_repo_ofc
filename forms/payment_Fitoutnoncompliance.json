{
    "className": "org.joget.apps.form.model.Form",
    "elements": [
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.apps.form.lib.HiddenField",
                        "properties": {
                            "id": "id",
                            "useDefaultWhenEmpty": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.HiddenField",
                        "properties": {
                            "id": "serviceCategoryType",
                            "useDefaultWhenEmpty": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "#form.ofc_ofc_category_tab.ofc_category_name[{form.ofc_serReqs_tab.ofc_category_name}]#",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "dmccvalue",
                            "label": "DMCC SR No.",
                            "maxlength": "",
                            "permissionHidden": "",
                            "placeholder": "",
                            "readonly": "true",
                            "readonlyLabel": "true",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "#requestParam.serReqDmccSrNo#",
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "currentuser",
                            "label": "Reported By",
                            "maxlength": "",
                            "permissionHidden": "",
                            "placeholder": "",
                            "readonly": "true",
                            "readonlyLabel": "true",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "#currentUser.fullName#",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "serReqSumr",
                "join": "",
                "label": "Service Request Form",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionHidden": "",
                "permissionReadonly": "",
                "readonly": "true",
                "readonlyLabel": "",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "",
                "visibilityValue": ""
            }
        },
        {
            "className": "org.joget.apps.form.model.Section",
            "elements": [{
                "className": "org.joget.apps.form.model.Column",
                "elements": [
                    {
                        "className": "org.joget.plugin.enterprise.CalculationField",
                        "properties": {
                            "equation": "(totalamt - VAT)",
                            "hidden": "",
                            "id": "fee_fitout_non_compliance",
                            "label": "Fitout Non-Compliance Fee",
                            "numOfDecimal": "2",
                            "postfix": "",
                            "prefix": "",
                            "readonlyLabel": "true",
                            "storeNumeric": "",
                            "style": "us",
                            "useThousandSeparator": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "variables": [
                                {
                                    "fieldId": "feetopay",
                                    "operation": "sum",
                                    "variableName": "totalamt"
                                },
                                {
                                    "fieldId": "noncompliance_vat",
                                    "operation": "sum",
                                    "variableName": "VAT"
                                }
                            ],
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.plugin.enterprise.CalculationField",
                        "properties": {
                            "equation": "(totalamt/100)*5",
                            "hidden": "",
                            "id": "noncompliance_vat",
                            "label": "VAT(5%)",
                            "numOfDecimal": "2",
                            "postfix": "",
                            "prefix": "",
                            "readonlyLabel": "true",
                            "storeNumeric": "",
                            "style": "us",
                            "useThousandSeparator": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "variables": [{
                                "fieldId": "feetopay",
                                "operation": "sum",
                                "variableName": "totalamt"
                            }],
                            "workflowVariable": ""
                        }
                    },
                    {
                        "className": "org.joget.apps.form.lib.TextField",
                        "properties": {
                            "encryption": "",
                            "id": "feetopay",
                            "label": "Fitout Non-Compliance Fee (VAT Inclusive)",
                            "maxlength": "",
                            "permissionHidden": "",
                            "placeholder": "",
                            "readonly": "true",
                            "readonlyLabel": "true",
                            "size": "",
                            "storeNumeric": "",
                            "style": "",
                            "validator": {
                                "className": "",
                                "properties": {}
                            },
                            "value": "",
                            "workflowVariable": ""
                        }
                    }
                ],
                "properties": {"width": "100%"}
            }],
            "properties": {
                "comment": "",
                "id": "fastractFee_1",
                "join": "",
                "label": "",
                "loadBinder": {
                    "className": "",
                    "properties": {}
                },
                "permission": {
                    "className": "",
                    "properties": {}
                },
                "permissionHidden": "",
                "permissionReadonly": "",
                "readonly": "true",
                "readonlyLabel": "true",
                "regex": "",
                "reverse": "",
                "storeBinder": {
                    "className": "",
                    "properties": {}
                },
                "visibilityControl": "applicationMode",
                "visibilityValue": "Yes"
            }
        }
    ],
    "properties": {
        "description": "",
        "id": "payment_Fitoutnoncompliance",
        "loadBinder": {
            "className": "org.joget.apps.form.lib.WorkflowFormBinder",
            "properties": {}
        },
        "name": "Payment Fitout Non Compliance",
        "noPermissionMessage": "",
        "permission": {
            "className": "",
            "properties": {}
        },
        "postProcessor": {
            "className": "",
            "properties": {}
        },
        "postProcessorRunOn": "create",
        "storeBinder": {
            "className": "org.joget.apps.form.lib.BeanShellFormBinder",
            "properties": {
                "autoHandleFiles": "",
                "autoHandleWorkflowVariable": "true",
                "cacheInterval": "",
                "script": "import org.apache.http.HttpResponse;\r\nimport org.apache.http.client.HttpClient;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.entity.StringEntity;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.util.EntityUtils;\r\nimport java.lang.String;\r\nimport org.apache.http.client.config.CookieSpecs;\r\nimport org.apache.http.client.config.RequestConfig;\r\nimport org.json.JSONObject;\r\nimport java.sql.*;\r\nimport java.util.*;\r\nimport java.sql.Connection;\r\nimport java.sql.PreparedStatement;\r\n\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.plugin.base.PluginManager;\r\nimport org.joget.workflow.model.service.WorkflowManager;\r\nimport org.joget.workflow.model.WorkflowAssignment;\r\n\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ScheduledExecutorService;\r\nimport java.util.concurrent.TimeUnit;\r\nimport org.apache.http.client.methods.HttpGet;\r\n\r\nimport org.joget.apps.app.service.AppUtil;\r\nimport org.joget.apps.form.model.Element;\r\nimport org.joget.apps.form.model.FormData;\r\nimport org.joget.apps.form.model.FormRow;\r\nimport org.joget.apps.form.model.FormRowSet;\r\nimport org.joget.apps.form.service.FormUtil;\r\nimport org.joget.plugin.base.PluginManager;\r\nimport org.joget.apps.form.model.FormLoadBinder;\r\nimport org.joget.apps.form.model.FormStoreBinder;\r\n\r\n// here we are update the o\r\n\r\nString orderReference = \"\";\r\n\r\n\r\n\r\n\r\n// Here we are creating request for order status retrive API\r\npublic String getOrderStatus(String orderReference) {\r\n\r\n  String orderStatus = \"\";\r\n  try {\r\n\r\n    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\r\n    Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:3307/jwdb?characterEncoding=UTF-8\", \"root\", \"\");\r\n    PreparedStatement stmt = conn.prepareStatement(\"SELECT c_status FROM app_fd_ofc_serreqs_tab WHERE c_noncompliance_paymentrefno = ?\");\r\n\r\n    stmt.setString(1, orderReference);\r\n\r\n    ResultSet rs = stmt.executeQuery();\r\n    while (rs.next()) {\r\n\r\n      orderStatus = rs.getString(\"c_status\");\r\n\r\n      // Do something with the retrieved data\r\n    }\r\n    rs.close();\r\n    stmt.close();\r\n    conn.close();\r\n  } catch (SQLException e) {\r\n    e.printStackTrace();\r\n  }\r\n  System.out.println(\"Order Status ======== \" + orderStatus);\r\n  return orderStatus;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Here we are saving the order details in db\r\npublic setOrderDetailsInDB(String orderReference, String merchantOrderReference, String access_token, String totalFeeSerReqWithfastTrack) {\r\n\r\n  try {\r\n\r\n    Class.forName(\"com.mysql.jdbc.Driver\").newInstance();\r\n    Connection con = DriverManager.getConnection(\"jdbc:mysql://localhost:3307/jwdb?characterEncoding=UTF-8\",\r\n      \"root\", \"\");\r\n    if (!con.isClosed()) {\r\n\r\n      String id = \"#form.ofc_serReqs_tab.id#\";\r\n      // create the java mysql update PreparedStatement\r\n      String query = \"update app_fd_ofc_serreqs_tab set c_noncompliance_merchantno = ?, c_noncompliance_paymentrefno = ?, c_bearer_access_token = ?   where id = ?\";\r\n\r\n      PreparedStatement preparedStmt = con.prepareStatement(query);\r\n      preparedStmt.setString(1, merchantOrderReference);\r\n      preparedStmt.setString(2, orderReference);\r\n      preparedStmt.setString(3, \"Bearer \" + access_token);\r\n    //   preparedStmt.setString(4, totalFeeSerReqWithfastTrack);\r\n      preparedStmt.setString(4, id);\r\n      // execute the java PreparedStatement\r\n      preparedStmt.executeUpdate();\r\n\r\n      con.close();\r\n    } else {\r\n      //////System.out.println(\"Connection Problem\");\r\n    }\r\n  } catch (Exception ex) {\r\n\r\n    ex.printStackTrace();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n//Create order method\r\npublic createOrder(String accessToken) {\r\n\r\n\r\n  String amendment =\"#form.ofc_ofc_category_tab.ofc_category_name[{form.ofc_serReqs_tab.ofc_category_name}]#\" ;\r\n\r\n\r\n   String paymentMode =\"\";\r\n\r\n \r\n\r\n \r\n  //\r\n\r\n  String amountStr = \"#form.ofc_serReqs_tab.feetopay#\";\r\n  String companyNameUsername = \"#form.ofc_company_tab.companyName[{form.ofc_serReqs_tab.companyName}]#\";\r\n  String companyNamOrEmail = \"#form.ofc_serReqs_tab.serReqUserName#\";\r\n  String finalAmount = \"\";\r\n  int totalAmount = 0;\r\n  String totalFeeSerReqWithfastTrack =\"\";\r\n\r\n\r\n \r\n    // here we are removing decimal points because create order payload only support\r\n    // non-decimal amount\r\n    \r\n      String amountInDecimalString = amountStr;\r\n      String amountWithoutDecimal = amountInDecimalString.replace(\".\", \"\");\r\n      totalAmount = Integer.parseInt(amountWithoutDecimal);\r\n      ////totalAmount = totalAmount * 100;\r\n      finalAmount = Integer.toString(totalAmount);\r\n      System.out.println(\"finalAmount  not = 0.00\"+finalAmount);\r\n\r\n   \r\n\r\n     // finalAmount = amountStr;\r\n      \r\n      //System.out.println(\"finalAmount 0.00\"+finalAmount);\r\n    \r\n\r\n\r\n \r\n//   //Here we are getting Remarks TextArea value\r\n//   PluginManager pluginManager = (PluginManager) AppUtil.getApplicationContext().getBean(\"pluginManager\");\r\n//   FormStoreBinder binder = (FormStoreBinder) pluginManager.getPlugin(\"org.joget.apps.form.lib.WorkflowFormBinder\");\r\n//   binder.store(element, rows, formData);\r\n//   FormRow row = rows.get(0);\r\n//   paymentMode = row.getProperty(\"applicationMode\");\r\n// // Here we are calculate Fast-Track amount\r\n \r\n// //System.out.println(\"fasttrack_mode ===\" + paymentMode);\r\n//   if(paymentMode != null && paymentMode.equals(\"Yes\")){\r\n  \r\n//     String fasttrackfee = row.getProperty(\"fasttrackTotAmt\").replace(\".\", \"\");\r\n//     amountStr = amountStr.replace(\".\", \"\");\r\n//     int grandTotal = Integer.parseInt(amountStr) + Integer.parseInt(fasttrackfee);\r\n//     finalAmount = Integer.toString(grandTotal);\r\n//     totalFeeSerReqWithfastTrack = finalAmount ;\r\n//     totalFeeSerReqWithfastTrack =   totalFeeSerReqWithfastTrack.substring(0, totalFeeSerReqWithfastTrack.length() - 2) + \".\" + totalFeeSerReqWithfastTrack.substring(totalFeeSerReqWithfastTrack.length() - 2);\r\n//     System.out.println(\"fasttrackfee \" + fasttrackfee);\r\n//     System.out.println(\"amountStr \" + amountStr);\r\n//     System.out.println(\"grandTotal \" + totalFeeSerReqWithfastTrack);\r\n//   } \r\n\r\n\r\n  // randomly generates a UUID for merchantOrderReference\r\n  UUID uuid = UUID.randomUUID();\r\n  String merchantOrderReference = uuid.toString();\r\n  int statusCode = 0;\r\n  // Define the URL and JSON payload\r\n  String url = \"https://api-gateway.sandbox.ngenius-payments.com/transactions/outlets/a2c3b529-68c7-44eb-8a2a-3aeb12d83ae6/orders\"; // Create\r\n  String cancelUrl = \"http://127.0.0.1:8080/jw/web/userview/ofc_app/v/_/serReqForm_crud1\";\r\n  String redirectUrl = \"http://127.0.0.1:8080/jw/web/userview/ofc_app/v/_/paynondirect?url=%2Fjw%2Fweb%2Fuserview%2Fofc_app%2Fv%2F_%2Fpaynondirect\";\r\n  // Create order Request\r\n  String jsonPayload = \"{\\\"action\\\":\\\"PURCHASE\\\",\\\"amount\\\":{\\\"currencyCode\\\":\\\"AED\\\",\\\"value\\\":\" + finalAmount +\r\n    \"},\\\"merchantOrderReference\\\":\\\"\" + merchantOrderReference +\r\n    \"\\\",\\\"merchantAttributes\\\":{\\\"redirectUrl\\\":\\\"\" + redirectUrl +\r\n    \"\\\",\\\"skipConfirmationPage\\\":\\\"true\\\",\\\"cancelText\\\":\\\"GoBacktoApplication\\\",\\\"cancelUrl\\\":\\\"\" +\r\n    cancelUrl + \"\\\"},\\\"emailAddress\\\":\\\"\" + companyNamOrEmail + \"\\\",\\\"billingAddress\\\":{\\\"firstName\\\":\\\"\" +\r\n    companyNameUsername + \"\\\",\\\"lastName\\\":\\\"-\\\",\\\"address1\\\":\\\"Dubai\\\",\\\"city\\\":\\\"Dubai\\\",\\\"countryCode\\\":\\\"UAE\\\"}}\";\r\n\r\n  try {\r\n    // Create the HttpClient and HttpPost objects\r\n    HttpClient httpClient = HttpClients.custom()\r\n      .setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())\r\n      .build();\r\n    HttpPost httpPost = new HttpPost(url);\r\n\r\n    // Set the request headers\r\n    httpPost.setHeader(\"Authorization\", \"Bearer \" + accessToken);\r\n    httpPost.setHeader(\"Content-Type\", \"application/vnd.ni-payment.v2+json\");\r\n    httpPost.setHeader(\"Accept\", \"application/vnd.ni-payment.v2+json\");\r\n\r\n    // Set the request body\r\n    StringEntity requestEntity = new StringEntity(jsonPayload);\r\n    httpPost.setEntity(requestEntity);\r\n\r\n    // Send the request and receive the response\r\n    HttpResponse response = httpClient.execute(httpPost);\r\n\r\n    // Set the request body\r\n    statusCode = response.getStatusLine().getStatusCode();\r\n    String responseBody = EntityUtils.toString(response.getEntity());;;\r\n\r\n    // getting the order reference\r\n    JSONObject jsonData = new JSONObject(responseBody);\r\n      System.out.println(\"jsonData == \"+jsonData);\r\n    String orderReference = (String) jsonData.get(\"reference\");\r\n  System.out.println(\"orderReference == \"+orderReference);\r\n    // calling order details save method\r\n    setOrderDetailsInDB(orderReference, merchantOrderReference, accessToken, totalFeeSerReqWithfastTrack);\r\n\r\n    // getting payment link from response\r\n    JSONObject links = jsonData.getJSONObject(\"_links\");\r\n    JSONObject payment = links.getJSONObject(\"payment\");\r\n    String paymentLink = payment.getString(\"href\");\r\n\r\n    //////System.out.println(\"paymentLink \" + paymentLink);\r\n    // Execute payment link\r\n    java.awt.Desktop.getDesktop().browse(java.net.URI.create(paymentLink));\r\n\r\n   \r\n   \r\n   \r\n   \r\n   \r\n    long startTime = System.currentTimeMillis(); // Get the current time\r\n    long maxSleepTime = 900000; // Maximum sleep time in milliseconds (5 minutes)\r\n\r\n    while ((System.currentTimeMillis() - startTime) < maxSleepTime) {\r\n\r\n      try {\r\n\r\n        String orderStatus = getOrderStatus(orderReference);\r\n\r\n        if (orderStatus.equalsIgnoreCase(\"Payment Completed\")) {\r\n\r\n          System.out.println(\"STATUS OF Timer = \" + orderStatus);\r\n\r\n        //   PluginManager pluginManager = (PluginManager) AppUtil.getApplicationContext().getBean(\"pluginManager\");\r\n        //   WorkflowManager wm = (WorkflowManager) pluginManager.getBean(\"workflowManager\");\r\n        //   String actId = \"#assignment.activityId#\";\r\n        //   wm.activityVariable(actId, \"noncompliance_paymentstatus\", \"Payment Completed\");\r\n       \r\n        //   if (paymentMode.equals(\"Yes\")) {\r\n        //       wm.activityVariable(actId, \"fastTrackPaymentStatus\", \"Yes\"); \r\n        //   }else{\r\n               \r\n        //       wm.activityVariable(actId, \"fastTrackPaymentStatus\", \"No\");  \r\n        //       wm.activityVariable(actId, \"serviceCategoryType\", \"#form.ofc_ofc_category_tab.ofc_category_name[{form.ofc_serReqs_tab.ofc_category_name}]#\");  \r\n           \r\n               \r\n        //   }\r\n        \r\n          // exit the while loop\r\n          break;\r\n\r\n        } else {\r\n          Thread.sleep(5000); // Sleep for 1 second\r\n        }\r\n\r\n      } catch (InterruptedException e) {\r\n        // Handle the interrupted exception\r\n        e.printStackTrace();\r\n      }\r\n    }//while loop end\r\n  \r\n      \r\n      \r\n      \r\n  } catch (Exception e) {\r\n      \r\n      \r\n    System.out.println(\"Response Status Code: \" + statusCode);\r\n   e.printStackTrace();\r\n    try {\r\n      String redirectUrl = \"http://localhost:8080/jw/web/userview/ofc_app/v/_/serReqForm_crud1\";\r\n      // Redirect page to service request summary\r\n      java.awt.Desktop.getDesktop().browse(java.net.URI.create(redirectUrl));\r\n    } catch (IOException e) {\r\n          \r\n          System.out.println(\"InterruptedException e: \" + statusCode);\r\n      // TODO Auto-generated catch block\r\n      e.printStackTrace();\r\n    }\r\n\r\n    e.printStackTrace();\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n// Here we are getting the access token\r\npublic getAccessToken() {\r\n\r\n  int statusCode = 0;\r\n  try {\r\n\r\n    String url = \"https://api-gateway.sandbox.ngenius-payments.com/identity/auth/access-token\";\r\n    String authorization = \"Authorization\";\r\n    String authorizationValue = \"Basic OGQwZWZiNTQtMmQ0YS00YmNlLTg5ODMtMTczMGEyZmRkOGU3OjQzNzNhMTFmLTMxYTgtNGE5NC05OWU5LWI4Y2FhYTI0MTJjZQ==\";\r\n    String contentType = \"Content-Type\";\r\n    String contentTypeValue = \"application/vnd.ni-identity.v1+json\";\r\n\r\n    // Create the HttpClient and HttpPost objects and code for remove cookie warring\r\n    HttpClient httpClient = HttpClients.custom()\r\n      .setDefaultRequestConfig(RequestConfig.custom().setCookieSpec(CookieSpecs.STANDARD).build())\r\n      .build();\r\n    HttpPost httpPost = new HttpPost(url);\r\n\r\n    // Set the request headers\r\n    httpPost.setHeader(authorization, authorizationValue);\r\n    httpPost.setHeader(contentType, contentTypeValue);\r\n\r\n    // Send the request and receive the response\r\n    HttpResponse response = httpClient.execute(httpPost);\r\n\r\n    // Get the response status code and body\r\n    statusCode = response.getStatusLine().getStatusCode();\r\n    String responseBody = EntityUtils.toString(response.getEntity());\r\n\r\n    // getting the order access token\r\n    JSONObject jsonData = new JSONObject(responseBody);\r\n    String access_token = (String) jsonData.get(\"access_token\");\r\n\r\n    // method call for create order\r\n    createOrder(access_token);\r\n\r\n  } catch (Exception ex) {\r\n\r\n    System.out.println(\"getAccessToken() Status code : \" + statusCode);\r\n    ex.printStackTrace();\r\n\r\n  }\r\n\r\n}\r\n//method calling\r\ngetAccessToken();",
                "useAjax": ""
            }
        },
        "tableName": "ofc_serReqs_tab"
    }
}